generator--特殊的函数

yield:
1 传参
2 返回值

runner

asybc/await

runner(function *()){
    xxx
    let 结果1=yield 异步操作1；

    xxx
    let 结果2=yield 异步操作2；

    xxx
});

(async()=>{
    xxx
    let 结果1=await 异步操作1；

    xxx
    let 结果2=await 异步操作2；

    xxx
})();

---------------

模块化---元件----组件
1 民间的-sea.js,require.js
CMD,AMD
2 nodejs模块化
3 ES6模块化
---------------------------------------------------
模块：
1 定义
2 调用
-------------------------------------------
sea-按需引用，解决依赖


node模块化
1 拥有 require,exports,module.
2 没有了define
3 引用自定义模块
   放到node_modules文件夹里
   前面加./

----------
1 创建包信息 npm init
-----------
ES6模块化：
import
export
----------------------------------------
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export
------------------------------------------

ES6-babel
WebPack

--------------------------------------------

Node:
输出
exports.xx=xxx
module.exports = {x,x,x};

引入
let mod = require('./aaa.js')

ES6:
输出
export (x,x,x)

引入
import mod from "./xxx.js"

-----------------------------------
babel -- ES6
1 安装babel-cli
 cli ==>command line interface
  npm i -g babel-cli

  在package.json中配置
  {
    "name": "babel-es6",
    "version": "1.0.0",
    "description": "",
    "main": "1.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1",
      "build": "babel js -d build"
    },
    "author": "",
    "license": "ISC",
    "devDependencies": {
      "babel-preset-env": "^1.7.0"
    }
  }

2 建立.babelrc文件，内部配置
{
  "presets":["env"]
}
3 控制台
cnpm i babel-preset-env --save-dev

4 查找如何使用组件
 cnpm search babel-preset-env
