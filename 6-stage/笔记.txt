模块化：
1sea.require--民间
  CMD,AMD

  模块.js define require/exports/module
  前台.html use
2 node.js               语言自身
  require/exports/module

  node_modules        ./
3. ES6                  官方
  export / import

---------------------------------------------------------------------------

babel --- ES6
WebPack --- 一站式完成

---------------------------------------------------------------------------

数据交互
1.http协议
2.form
3.ajax------官方，不能跨域 aaa.com->bbb.com  单向
4.jsonp-----民间，可以跨域             不推荐
5.websocket --- 双向

-----------------------------------------------------------------------

$.ajax({});

-----------------------------------------------------------------------

http://www.ietf.org/rfc/rfc2616.txt
http协议---协议
1.无状态的协议
2.请求过程：连接，接受，发送请求
3.消息分成两部分，一块头 32k ，一块叫身  1G

-----------------------------------------------------------------------

http缓存
1.野路子---随机数
2.官方---3个头

------------------------------------------------------------------------

http和https区别

证书----

------------------------------------------------------------------------


http版本 1.0, 短连接
1.1主流 长连接-keep alive

http2.0

-------------------------------------------------------------------------

webSocket
----------------------------------------------------------------------------

form最重要
1 action -- 提交到哪去
2 method -- GET /POST/PUT/DELETE/HEAD
  GET    把数据放在url里面传输       数据量少,缓存，看得见   32K
  post   放在body里        数据量大 不会缓存 看不见

  GET --- 获取东西
  POS，PUT---- 发送东西 ,大量发送
  DELETE----删除
  HEAD---让服务器只发送头回来就行（不需要内容）

3 name--名字

4 enctype=""
  enctype="application/x-www-form-urlencoded" 名字=值&&名字=值&名字=值 默认
  enctype="multipart/form-data" 上传文件使用 分块             文件上传，大数据
  enctype="text/plain

-------------------------

ajax原理,jsonp原理
WebSocket


----------------------------------------------------------------------

ajax上传，formData

--------------------------------
ajax原理-XMLHTTPRequest

XmlHttpRequest-IE6-----可以查看blue老师js视频教程

1 ajax好：用户体验好，性能高
  后台
--------------------------------------
GET URL 版本

--------------------------
异步--好
同步--简单
-----------------------------
on ready state change  当通信状态改变
当 准备   状态  改变

readyState
0 初始状态  xhr对象刚创建完
1 连接    连接到服务器(处于连接状态)
2 发送请求  刚刚send完
3 接收完成  头接收完了
4 接收完成  体接收完了

-------------------------------------------------------

数字
status---http状态码
http状态码，分成五段

1xx 消息
2xx 成功
3xx 重定向
  301   永久重定向--下回不会再请求这个服务器
  302   临时重定向---下回依然会请求这个服务器
  304   缓存去取资源

成功：2xx,304

4xx 请求错误 客户端请求错误
5xx 服务端错误
6xx+ 自定义



----------------------------------------------------------
为什么要重定向

taobao.com
PC端访问       302->www.taobao.com
手机端访问      302->m.taobao.com

为了cookie

----------------------------------------------------------------

接受响应数据
xhr.response
xhr.responseURL -----  响应回来的地址

xhr.responseTest     文本数据
xhr.responseXML      xml数据

小明，23岁，做前端，两个姐姐，一个叫小红，25岁，做老师的，另一个叫小花，27岁，做后台的
let json{name:'小明',age:23,job:'前端开始',sister:[
  {
    name:'小红',age:25
  }
]}

------------------------------------------

eval -- 不安全

------------------------------------------

JSON.stringify       {a:12,b:5}=>"{\"a\":12,\"b\":5}"
JSON.parse      "{\"a\":12,\"b\":5}" ==> {a:12,b:5}


JSON-不兼容

------------------------------------------------------------------

安全：
1.前台没有安全性；后台才有问题（注入）
2.xss--跨站脚本攻击

ajax不允许跨域 ---

--------------------------------------------------------------------

ajax跨域
jsonp---不要用

WebSocket--双工，跨域

ajax上传文件

-----------------------------------------------------------------------------
为什么需要json转义

json标准格式
1 key必须用引号包起来
2 双引号

沙箱模式---隔离出来虚假的系统
c的数组和js的数组有啥区别
c数组--空间  没有结尾，没有长度，没有操作，定长
js数组-对象   相关操作;变长

链表和数组
链表-定长，可以随意扩展-o（1）,不擅长查找o(n)
数组-定长，不擅长扩展--o(n),擅长(查找/索引)o(1)
